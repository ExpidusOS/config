const std = @import("std");

pub fn readFile(allocator: std.mem.Allocator, path: []const u8) ![]u8 {
    const file = try std.fs.openFileAbsolute(path, .{});
    defer file.close();

    const metadata = try file.metadata();
    const buffer = try allocator.alloc(u8, metadata.size());
    errdefer allocator.free(buffer);

    _ = try file.readAll(buffer);
    return buffer;
}

pub fn readJsonFile(comptime T: type, allocator: std.mem.Allocator, path: []const u8) anyerror!std.json.Parsed(T) {
    const buffer = try readFile(allocator, path);
    defer allocator.free(buffer);
    return try std.json.parseFromSlice(T, allocator, buffer, .{});
}

pub fn writeFile(path: []const u8, value: []const u8) !void {
    const file = try std.fs.openFileAbsolute(path, .{});
    defer file.close();
    try file.writeAll(value);
}

pub fn genHosts(allocator: std.mem.Allocator, hostname: []const u8) ![]const u8 {
    return try std.fmt.allocPrint(allocator,
        \\# Generated by ExpidusOS Config
        \\127.0.0.1 localhost
        \\::1 localhost
        \\
        \\127.0.0.1 {0s}
        \\::1 {0s}
    , .{hostname});
}
